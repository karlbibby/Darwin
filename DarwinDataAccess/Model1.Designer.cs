//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Data.EntityClient;
using System.ComponentModel;
using System.Xml.Serialization;
using System.Runtime.Serialization;

[assembly: EdmSchemaAttribute()]
#region EDM Relationship Metadata

[assembly: EdmRelationshipAttribute("DataStoreModel", "FK_Genus", "Genus", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Darwin.DataAccess.Genus), "Species", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Darwin.DataAccess.Species), true)]
[assembly: EdmRelationshipAttribute("DataStoreModel", "FK_Kingdom", "Kingdom", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Darwin.DataAccess.Kingdom), "Species", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Darwin.DataAccess.Species), true)]
[assembly: EdmRelationshipAttribute("DataStoreModel", "FK_Kingdom_C", "Kingdom", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Darwin.DataAccess.Kingdom), "Phylum", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Darwin.DataAccess.Phylum), true)]
[assembly: EdmRelationshipAttribute("DataStoreModel", "FK_Class", "Class", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Darwin.DataAccess.Class), "Species", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Darwin.DataAccess.Species), true)]
[assembly: EdmRelationshipAttribute("DataStoreModel", "FK_Family", "Family", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Darwin.DataAccess.Family), "Genu", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Darwin.DataAccess.Genus), true)]
[assembly: EdmRelationshipAttribute("DataStoreModel", "FK_Order", "Order", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Darwin.DataAccess.Order), "Family", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Darwin.DataAccess.Family), true)]
[assembly: EdmRelationshipAttribute("DataStoreModel", "FK_Phylums", "Phylum", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Darwin.DataAccess.Phylum), "Species", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Darwin.DataAccess.Species), true)]
[assembly: EdmRelationshipAttribute("DataStoreModel", "FK_Phylumms", "Phylum", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Darwin.DataAccess.Phylum), "Class", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Darwin.DataAccess.Class), true)]
[assembly: EdmRelationshipAttribute("DataStoreModel", "FK_Classs", "Class", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Darwin.DataAccess.Class), "Order", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Darwin.DataAccess.Order), true)]
[assembly: EdmRelationshipAttribute("DataStoreModel", "FK_Famillyy", "Family", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Darwin.DataAccess.Family), "Species", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Darwin.DataAccess.Species), true)]
[assembly: EdmRelationshipAttribute("DataStoreModel", "FK_OOrder", "Order", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Darwin.DataAccess.Order), "Species", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Darwin.DataAccess.Species), true)]
[assembly: EdmRelationshipAttribute("DataStoreModel", "MapToSpecies", "Species", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Darwin.DataAccess.Species), "MapRef", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Darwin.DataAccess.MapRef), true)]
[assembly: EdmRelationshipAttribute("DataStoreModel", "Sp1CR", "Species", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Darwin.DataAccess.Species), "SimilarSpecy", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Darwin.DataAccess.SimilarSpecy), true)]
[assembly: EdmRelationshipAttribute("DataStoreModel", "Sp2CR", "Species", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Darwin.DataAccess.Species), "SimilarSpecy", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Darwin.DataAccess.SimilarSpecy), true)]
[assembly: EdmRelationshipAttribute("DataStoreModel", "spst", "SpeciesStatu", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Darwin.DataAccess.SpeciesStatu), "Species", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Darwin.DataAccess.Species), true)]

#endregion

namespace Darwin.DataAccess
{
    #region Contexts
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class DataStoreEntities : ObjectContext
    {
        #region Constructors
    
        /// <summary>
        /// Initializes a new DataStoreEntities object using the connection string found in the 'DataStoreEntities' section of the application configuration file.
        /// </summary>
        public DataStoreEntities() : base("name=DataStoreEntities", "DataStoreEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new DataStoreEntities object.
        /// </summary>
        public DataStoreEntities(string connectionString) : base(connectionString, "DataStoreEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new DataStoreEntities object.
        /// </summary>
        public DataStoreEntities(EntityConnection connection) : base(connection, "DataStoreEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Partial Methods
    
        partial void OnContextCreated();
    
        #endregion
    
        #region ObjectSet Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Class> Classes
        {
            get
            {
                if ((_Classes == null))
                {
                    _Classes = base.CreateObjectSet<Class>("Classes");
                }
                return _Classes;
            }
        }
        private ObjectSet<Class> _Classes;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Genus> Genuss
        {
            get
            {
                if ((_Genuss == null))
                {
                    _Genuss = base.CreateObjectSet<Genus>("Genuss");
                }
                return _Genuss;
            }
        }
        private ObjectSet<Genus> _Genuss;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Order> Orders
        {
            get
            {
                if ((_Orders == null))
                {
                    _Orders = base.CreateObjectSet<Order>("Orders");
                }
                return _Orders;
            }
        }
        private ObjectSet<Order> _Orders;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Phylum> Phyla
        {
            get
            {
                if ((_Phyla == null))
                {
                    _Phyla = base.CreateObjectSet<Phylum>("Phyla");
                }
                return _Phyla;
            }
        }
        private ObjectSet<Phylum> _Phyla;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Species> Species
        {
            get
            {
                if ((_Species == null))
                {
                    _Species = base.CreateObjectSet<Species>("Species");
                }
                return _Species;
            }
        }
        private ObjectSet<Species> _Species;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Family> Families
        {
            get
            {
                if ((_Families == null))
                {
                    _Families = base.CreateObjectSet<Family>("Families");
                }
                return _Families;
            }
        }
        private ObjectSet<Family> _Families;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Kingdom> Kingdoms
        {
            get
            {
                if ((_Kingdoms == null))
                {
                    _Kingdoms = base.CreateObjectSet<Kingdom>("Kingdoms");
                }
                return _Kingdoms;
            }
        }
        private ObjectSet<Kingdom> _Kingdoms;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<MapRef> MapRefs
        {
            get
            {
                if ((_MapRefs == null))
                {
                    _MapRefs = base.CreateObjectSet<MapRef>("MapRefs");
                }
                return _MapRefs;
            }
        }
        private ObjectSet<MapRef> _MapRefs;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<SimilarSpecy> SimilarSpecies
        {
            get
            {
                if ((_SimilarSpecies == null))
                {
                    _SimilarSpecies = base.CreateObjectSet<SimilarSpecy>("SimilarSpecies");
                }
                return _SimilarSpecies;
            }
        }
        private ObjectSet<SimilarSpecy> _SimilarSpecies;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<SpeciesStatu> SpeciesStatus
        {
            get
            {
                if ((_SpeciesStatus == null))
                {
                    _SpeciesStatus = base.CreateObjectSet<SpeciesStatu>("SpeciesStatus");
                }
                return _SpeciesStatus;
            }
        }
        private ObjectSet<SpeciesStatu> _SpeciesStatus;

        #endregion
        #region AddTo Methods
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Classes EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToClasses(Class @class)
        {
            base.AddObject("Classes", @class);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Genuss EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToGenuss(Genus genus)
        {
            base.AddObject("Genuss", genus);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Orders EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToOrders(Order order)
        {
            base.AddObject("Orders", order);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Phyla EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToPhyla(Phylum phylum)
        {
            base.AddObject("Phyla", phylum);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Species EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToSpecies(Species species)
        {
            base.AddObject("Species", species);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Families EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToFamilies(Family family)
        {
            base.AddObject("Families", family);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Kingdoms EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToKingdoms(Kingdom kingdom)
        {
            base.AddObject("Kingdoms", kingdom);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the MapRefs EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToMapRefs(MapRef mapRef)
        {
            base.AddObject("MapRefs", mapRef);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the SimilarSpecies EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToSimilarSpecies(SimilarSpecy similarSpecy)
        {
            base.AddObject("SimilarSpecies", similarSpecy);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the SpeciesStatus EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToSpeciesStatus(SpeciesStatu speciesStatu)
        {
            base.AddObject("SpeciesStatus", speciesStatu);
        }

        #endregion
    }
    

    #endregion
    
    #region Entities
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="DataStoreModel", Name="Class")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Class : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Class object.
        /// </summary>
        /// <param name="classId">Initial value of the ClassId property.</param>
        public static Class CreateClass(global::System.Int32 classId)
        {
            Class @class = new Class();
            @class.ClassId = classId;
            return @class;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ClassId
        {
            get
            {
                return _ClassId;
            }
            set
            {
                if (_ClassId != value)
                {
                    OnClassIdChanging(value);
                    ReportPropertyChanging("ClassId");
                    _ClassId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ClassId");
                    OnClassIdChanged();
                }
            }
        }
        private global::System.Int32 _ClassId;
        partial void OnClassIdChanging(global::System.Int32 value);
        partial void OnClassIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ClassName
        {
            get
            {
                return _ClassName;
            }
            set
            {
                OnClassNameChanging(value);
                ReportPropertyChanging("ClassName");
                _ClassName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ClassName");
                OnClassNameChanged();
            }
        }
        private global::System.String _ClassName;
        partial void OnClassNameChanging(global::System.String value);
        partial void OnClassNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> PhylumId
        {
            get
            {
                return _PhylumId;
            }
            set
            {
                OnPhylumIdChanging(value);
                ReportPropertyChanging("PhylumId");
                _PhylumId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("PhylumId");
                OnPhylumIdChanged();
            }
        }
        private Nullable<global::System.Int32> _PhylumId;
        partial void OnPhylumIdChanging(Nullable<global::System.Int32> value);
        partial void OnPhylumIdChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DataStoreModel", "FK_Class", "Species")]
        public EntityCollection<Species> Species
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Species>("DataStoreModel.FK_Class", "Species");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Species>("DataStoreModel.FK_Class", "Species", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DataStoreModel", "FK_Phylumms", "Phylum")]
        public Phylum Phylum
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Phylum>("DataStoreModel.FK_Phylumms", "Phylum").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Phylum>("DataStoreModel.FK_Phylumms", "Phylum").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Phylum> PhylumReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Phylum>("DataStoreModel.FK_Phylumms", "Phylum");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Phylum>("DataStoreModel.FK_Phylumms", "Phylum", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DataStoreModel", "FK_Classs", "Order")]
        public EntityCollection<Order> Orders
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Order>("DataStoreModel.FK_Classs", "Order");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Order>("DataStoreModel.FK_Classs", "Order", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="DataStoreModel", Name="Family")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Family : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Family object.
        /// </summary>
        /// <param name="familyId">Initial value of the FamilyId property.</param>
        public static Family CreateFamily(global::System.Int32 familyId)
        {
            Family family = new Family();
            family.FamilyId = familyId;
            return family;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 FamilyId
        {
            get
            {
                return _FamilyId;
            }
            set
            {
                if (_FamilyId != value)
                {
                    OnFamilyIdChanging(value);
                    ReportPropertyChanging("FamilyId");
                    _FamilyId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("FamilyId");
                    OnFamilyIdChanged();
                }
            }
        }
        private global::System.Int32 _FamilyId;
        partial void OnFamilyIdChanging(global::System.Int32 value);
        partial void OnFamilyIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String FamilyName
        {
            get
            {
                return _FamilyName;
            }
            set
            {
                OnFamilyNameChanging(value);
                ReportPropertyChanging("FamilyName");
                _FamilyName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("FamilyName");
                OnFamilyNameChanged();
            }
        }
        private global::System.String _FamilyName;
        partial void OnFamilyNameChanging(global::System.String value);
        partial void OnFamilyNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> OrderId
        {
            get
            {
                return _OrderId;
            }
            set
            {
                OnOrderIdChanging(value);
                ReportPropertyChanging("OrderId");
                _OrderId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("OrderId");
                OnOrderIdChanged();
            }
        }
        private Nullable<global::System.Int32> _OrderId;
        partial void OnOrderIdChanging(Nullable<global::System.Int32> value);
        partial void OnOrderIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Notes
        {
            get
            {
                return _Notes;
            }
            set
            {
                OnNotesChanging(value);
                ReportPropertyChanging("Notes");
                _Notes = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Notes");
                OnNotesChanged();
            }
        }
        private global::System.String _Notes;
        partial void OnNotesChanging(global::System.String value);
        partial void OnNotesChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DataStoreModel", "FK_Family", "Genu")]
        public EntityCollection<Genus> Genus
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Genus>("DataStoreModel.FK_Family", "Genu");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Genus>("DataStoreModel.FK_Family", "Genu", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DataStoreModel", "FK_Order", "Order")]
        public Order Order
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Order>("DataStoreModel.FK_Order", "Order").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Order>("DataStoreModel.FK_Order", "Order").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Order> OrderReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Order>("DataStoreModel.FK_Order", "Order");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Order>("DataStoreModel.FK_Order", "Order", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DataStoreModel", "FK_Famillyy", "Species")]
        public EntityCollection<Species> Species
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Species>("DataStoreModel.FK_Famillyy", "Species");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Species>("DataStoreModel.FK_Famillyy", "Species", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="DataStoreModel", Name="Genus")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Genus : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Genus object.
        /// </summary>
        /// <param name="genusId">Initial value of the GenusId property.</param>
        public static Genus CreateGenus(global::System.Int32 genusId)
        {
            Genus genus = new Genus();
            genus.GenusId = genusId;
            return genus;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 GenusId
        {
            get
            {
                return _GenusId;
            }
            set
            {
                if (_GenusId != value)
                {
                    OnGenusIdChanging(value);
                    ReportPropertyChanging("GenusId");
                    _GenusId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("GenusId");
                    OnGenusIdChanged();
                }
            }
        }
        private global::System.Int32 _GenusId;
        partial void OnGenusIdChanging(global::System.Int32 value);
        partial void OnGenusIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String GenusName
        {
            get
            {
                return _GenusName;
            }
            set
            {
                OnGenusNameChanging(value);
                ReportPropertyChanging("GenusName");
                _GenusName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("GenusName");
                OnGenusNameChanged();
            }
        }
        private global::System.String _GenusName;
        partial void OnGenusNameChanging(global::System.String value);
        partial void OnGenusNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> FamilyId
        {
            get
            {
                return _FamilyId;
            }
            set
            {
                OnFamilyIdChanging(value);
                ReportPropertyChanging("FamilyId");
                _FamilyId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("FamilyId");
                OnFamilyIdChanged();
            }
        }
        private Nullable<global::System.Int32> _FamilyId;
        partial void OnFamilyIdChanging(Nullable<global::System.Int32> value);
        partial void OnFamilyIdChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DataStoreModel", "FK_Genus", "Species")]
        public EntityCollection<Species> Species
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Species>("DataStoreModel.FK_Genus", "Species");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Species>("DataStoreModel.FK_Genus", "Species", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DataStoreModel", "FK_Family", "Family")]
        public Family Family
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Family>("DataStoreModel.FK_Family", "Family").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Family>("DataStoreModel.FK_Family", "Family").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Family> FamilyReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Family>("DataStoreModel.FK_Family", "Family");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Family>("DataStoreModel.FK_Family", "Family", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="DataStoreModel", Name="Kingdom")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Kingdom : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Kingdom object.
        /// </summary>
        /// <param name="kingdomId">Initial value of the KingdomId property.</param>
        public static Kingdom CreateKingdom(global::System.Int32 kingdomId)
        {
            Kingdom kingdom = new Kingdom();
            kingdom.KingdomId = kingdomId;
            return kingdom;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 KingdomId
        {
            get
            {
                return _KingdomId;
            }
            set
            {
                if (_KingdomId != value)
                {
                    OnKingdomIdChanging(value);
                    ReportPropertyChanging("KingdomId");
                    _KingdomId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("KingdomId");
                    OnKingdomIdChanged();
                }
            }
        }
        private global::System.Int32 _KingdomId;
        partial void OnKingdomIdChanging(global::System.Int32 value);
        partial void OnKingdomIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String KingdomName
        {
            get
            {
                return _KingdomName;
            }
            set
            {
                OnKingdomNameChanging(value);
                ReportPropertyChanging("KingdomName");
                _KingdomName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("KingdomName");
                OnKingdomNameChanged();
            }
        }
        private global::System.String _KingdomName;
        partial void OnKingdomNameChanging(global::System.String value);
        partial void OnKingdomNameChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DataStoreModel", "FK_Kingdom", "Species")]
        public EntityCollection<Species> Species
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Species>("DataStoreModel.FK_Kingdom", "Species");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Species>("DataStoreModel.FK_Kingdom", "Species", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DataStoreModel", "FK_Kingdom_C", "Phylum")]
        public EntityCollection<Phylum> Phyla
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Phylum>("DataStoreModel.FK_Kingdom_C", "Phylum");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Phylum>("DataStoreModel.FK_Kingdom_C", "Phylum", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="DataStoreModel", Name="MapRef")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class MapRef : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new MapRef object.
        /// </summary>
        /// <param name="mapId">Initial value of the MapId property.</param>
        public static MapRef CreateMapRef(global::System.Int32 mapId)
        {
            MapRef mapRef = new MapRef();
            mapRef.MapId = mapId;
            return mapRef;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 MapId
        {
            get
            {
                return _MapId;
            }
            set
            {
                if (_MapId != value)
                {
                    OnMapIdChanging(value);
                    ReportPropertyChanging("MapId");
                    _MapId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("MapId");
                    OnMapIdChanged();
                }
            }
        }
        private global::System.Int32 _MapId;
        partial void OnMapIdChanging(global::System.Int32 value);
        partial void OnMapIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> SpeciesId
        {
            get
            {
                return _SpeciesId;
            }
            set
            {
                OnSpeciesIdChanging(value);
                ReportPropertyChanging("SpeciesId");
                _SpeciesId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("SpeciesId");
                OnSpeciesIdChanged();
            }
        }
        private Nullable<global::System.Int32> _SpeciesId;
        partial void OnSpeciesIdChanging(Nullable<global::System.Int32> value);
        partial void OnSpeciesIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> MapX
        {
            get
            {
                return _MapX;
            }
            set
            {
                OnMapXChanging(value);
                ReportPropertyChanging("MapX");
                _MapX = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("MapX");
                OnMapXChanged();
            }
        }
        private Nullable<global::System.Int32> _MapX;
        partial void OnMapXChanging(Nullable<global::System.Int32> value);
        partial void OnMapXChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> MapY
        {
            get
            {
                return _MapY;
            }
            set
            {
                OnMapYChanging(value);
                ReportPropertyChanging("MapY");
                _MapY = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("MapY");
                OnMapYChanged();
            }
        }
        private Nullable<global::System.Int32> _MapY;
        partial void OnMapYChanging(Nullable<global::System.Int32> value);
        partial void OnMapYChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> DateSeen
        {
            get
            {
                return _DateSeen;
            }
            set
            {
                OnDateSeenChanging(value);
                ReportPropertyChanging("DateSeen");
                _DateSeen = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DateSeen");
                OnDateSeenChanged();
            }
        }
        private Nullable<global::System.DateTime> _DateSeen;
        partial void OnDateSeenChanging(Nullable<global::System.DateTime> value);
        partial void OnDateSeenChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Notes
        {
            get
            {
                return _Notes;
            }
            set
            {
                OnNotesChanging(value);
                ReportPropertyChanging("Notes");
                _Notes = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Notes");
                OnNotesChanged();
            }
        }
        private global::System.String _Notes;
        partial void OnNotesChanging(global::System.String value);
        partial void OnNotesChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DataStoreModel", "MapToSpecies", "Species")]
        public Species Species
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Species>("DataStoreModel.MapToSpecies", "Species").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Species>("DataStoreModel.MapToSpecies", "Species").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Species> SpeciesReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Species>("DataStoreModel.MapToSpecies", "Species");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Species>("DataStoreModel.MapToSpecies", "Species", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="DataStoreModel", Name="Order")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Order : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Order object.
        /// </summary>
        /// <param name="orderId">Initial value of the OrderId property.</param>
        public static Order CreateOrder(global::System.Int32 orderId)
        {
            Order order = new Order();
            order.OrderId = orderId;
            return order;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 OrderId
        {
            get
            {
                return _OrderId;
            }
            set
            {
                if (_OrderId != value)
                {
                    OnOrderIdChanging(value);
                    ReportPropertyChanging("OrderId");
                    _OrderId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("OrderId");
                    OnOrderIdChanged();
                }
            }
        }
        private global::System.Int32 _OrderId;
        partial void OnOrderIdChanging(global::System.Int32 value);
        partial void OnOrderIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String OrderName
        {
            get
            {
                return _OrderName;
            }
            set
            {
                OnOrderNameChanging(value);
                ReportPropertyChanging("OrderName");
                _OrderName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("OrderName");
                OnOrderNameChanged();
            }
        }
        private global::System.String _OrderName;
        partial void OnOrderNameChanging(global::System.String value);
        partial void OnOrderNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> ClassId
        {
            get
            {
                return _ClassId;
            }
            set
            {
                OnClassIdChanging(value);
                ReportPropertyChanging("ClassId");
                _ClassId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ClassId");
                OnClassIdChanged();
            }
        }
        private Nullable<global::System.Int32> _ClassId;
        partial void OnClassIdChanging(Nullable<global::System.Int32> value);
        partial void OnClassIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> NumberInOrder
        {
            get
            {
                return _NumberInOrder;
            }
            set
            {
                OnNumberInOrderChanging(value);
                ReportPropertyChanging("NumberInOrder");
                _NumberInOrder = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("NumberInOrder");
                OnNumberInOrderChanged();
            }
        }
        private Nullable<global::System.Int32> _NumberInOrder;
        partial void OnNumberInOrderChanging(Nullable<global::System.Int32> value);
        partial void OnNumberInOrderChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Notes
        {
            get
            {
                return _Notes;
            }
            set
            {
                OnNotesChanging(value);
                ReportPropertyChanging("Notes");
                _Notes = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Notes");
                OnNotesChanged();
            }
        }
        private global::System.String _Notes;
        partial void OnNotesChanging(global::System.String value);
        partial void OnNotesChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DataStoreModel", "FK_Order", "Family")]
        public EntityCollection<Family> Families
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Family>("DataStoreModel.FK_Order", "Family");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Family>("DataStoreModel.FK_Order", "Family", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DataStoreModel", "FK_Classs", "Class")]
        public Class Class
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Class>("DataStoreModel.FK_Classs", "Class").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Class>("DataStoreModel.FK_Classs", "Class").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Class> ClassReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Class>("DataStoreModel.FK_Classs", "Class");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Class>("DataStoreModel.FK_Classs", "Class", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DataStoreModel", "FK_OOrder", "Species")]
        public EntityCollection<Species> Species
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Species>("DataStoreModel.FK_OOrder", "Species");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Species>("DataStoreModel.FK_OOrder", "Species", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="DataStoreModel", Name="Phylum")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Phylum : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Phylum object.
        /// </summary>
        /// <param name="phylumId">Initial value of the PhylumId property.</param>
        public static Phylum CreatePhylum(global::System.Int32 phylumId)
        {
            Phylum phylum = new Phylum();
            phylum.PhylumId = phylumId;
            return phylum;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 PhylumId
        {
            get
            {
                return _PhylumId;
            }
            set
            {
                if (_PhylumId != value)
                {
                    OnPhylumIdChanging(value);
                    ReportPropertyChanging("PhylumId");
                    _PhylumId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("PhylumId");
                    OnPhylumIdChanged();
                }
            }
        }
        private global::System.Int32 _PhylumId;
        partial void OnPhylumIdChanging(global::System.Int32 value);
        partial void OnPhylumIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String PhylumName
        {
            get
            {
                return _PhylumName;
            }
            set
            {
                OnPhylumNameChanging(value);
                ReportPropertyChanging("PhylumName");
                _PhylumName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("PhylumName");
                OnPhylumNameChanged();
            }
        }
        private global::System.String _PhylumName;
        partial void OnPhylumNameChanging(global::System.String value);
        partial void OnPhylumNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> KingdomId
        {
            get
            {
                return _KingdomId;
            }
            set
            {
                OnKingdomIdChanging(value);
                ReportPropertyChanging("KingdomId");
                _KingdomId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("KingdomId");
                OnKingdomIdChanged();
            }
        }
        private Nullable<global::System.Int32> _KingdomId;
        partial void OnKingdomIdChanging(Nullable<global::System.Int32> value);
        partial void OnKingdomIdChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DataStoreModel", "FK_Kingdom_C", "Kingdom")]
        public Kingdom Kingdom
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Kingdom>("DataStoreModel.FK_Kingdom_C", "Kingdom").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Kingdom>("DataStoreModel.FK_Kingdom_C", "Kingdom").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Kingdom> KingdomReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Kingdom>("DataStoreModel.FK_Kingdom_C", "Kingdom");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Kingdom>("DataStoreModel.FK_Kingdom_C", "Kingdom", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DataStoreModel", "FK_Phylums", "Species")]
        public EntityCollection<Species> Species
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Species>("DataStoreModel.FK_Phylums", "Species");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Species>("DataStoreModel.FK_Phylums", "Species", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DataStoreModel", "FK_Phylumms", "Class")]
        public EntityCollection<Class> Classes
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Class>("DataStoreModel.FK_Phylumms", "Class");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Class>("DataStoreModel.FK_Phylumms", "Class", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="DataStoreModel", Name="SimilarSpecy")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class SimilarSpecy : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new SimilarSpecy object.
        /// </summary>
        /// <param name="similarId">Initial value of the SimilarId property.</param>
        public static SimilarSpecy CreateSimilarSpecy(global::System.Int32 similarId)
        {
            SimilarSpecy similarSpecy = new SimilarSpecy();
            similarSpecy.SimilarId = similarId;
            return similarSpecy;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 SimilarId
        {
            get
            {
                return _SimilarId;
            }
            set
            {
                if (_SimilarId != value)
                {
                    OnSimilarIdChanging(value);
                    ReportPropertyChanging("SimilarId");
                    _SimilarId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("SimilarId");
                    OnSimilarIdChanged();
                }
            }
        }
        private global::System.Int32 _SimilarId;
        partial void OnSimilarIdChanging(global::System.Int32 value);
        partial void OnSimilarIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> SpeciesId1
        {
            get
            {
                return _SpeciesId1;
            }
            set
            {
                OnSpeciesId1Changing(value);
                ReportPropertyChanging("SpeciesId1");
                _SpeciesId1 = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("SpeciesId1");
                OnSpeciesId1Changed();
            }
        }
        private Nullable<global::System.Int32> _SpeciesId1;
        partial void OnSpeciesId1Changing(Nullable<global::System.Int32> value);
        partial void OnSpeciesId1Changed();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> SpeciesId2
        {
            get
            {
                return _SpeciesId2;
            }
            set
            {
                OnSpeciesId2Changing(value);
                ReportPropertyChanging("SpeciesId2");
                _SpeciesId2 = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("SpeciesId2");
                OnSpeciesId2Changed();
            }
        }
        private Nullable<global::System.Int32> _SpeciesId2;
        partial void OnSpeciesId2Changing(Nullable<global::System.Int32> value);
        partial void OnSpeciesId2Changed();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DataStoreModel", "Sp1CR", "Species")]
        public Species SpeciesToId1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Species>("DataStoreModel.Sp1CR", "Species").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Species>("DataStoreModel.Sp1CR", "Species").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Species> SpeciesToId1Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Species>("DataStoreModel.Sp1CR", "Species");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Species>("DataStoreModel.Sp1CR", "Species", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DataStoreModel", "Sp2CR", "Species")]
        public Species SpeciesToId2
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Species>("DataStoreModel.Sp2CR", "Species").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Species>("DataStoreModel.Sp2CR", "Species").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Species> SpeciesToId2Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Species>("DataStoreModel.Sp2CR", "Species");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Species>("DataStoreModel.Sp2CR", "Species", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="DataStoreModel", Name="Species")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Species : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Species object.
        /// </summary>
        /// <param name="speciesId">Initial value of the SpeciesId property.</param>
        public static Species CreateSpecies(global::System.Int32 speciesId)
        {
            Species species = new Species();
            species.SpeciesId = speciesId;
            return species;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 SpeciesId
        {
            get
            {
                return _SpeciesId;
            }
            set
            {
                if (_SpeciesId != value)
                {
                    OnSpeciesIdChanging(value);
                    ReportPropertyChanging("SpeciesId");
                    _SpeciesId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("SpeciesId");
                    OnSpeciesIdChanged();
                }
            }
        }
        private global::System.Int32 _SpeciesId;
        partial void OnSpeciesIdChanging(global::System.Int32 value);
        partial void OnSpeciesIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> PhylumId
        {
            get
            {
                return _PhylumId;
            }
            set
            {
                OnPhylumIdChanging(value);
                ReportPropertyChanging("PhylumId");
                _PhylumId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("PhylumId");
                OnPhylumIdChanged();
            }
        }
        private Nullable<global::System.Int32> _PhylumId;
        partial void OnPhylumIdChanging(Nullable<global::System.Int32> value);
        partial void OnPhylumIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> ClassId
        {
            get
            {
                return _ClassId;
            }
            set
            {
                OnClassIdChanging(value);
                ReportPropertyChanging("ClassId");
                _ClassId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ClassId");
                OnClassIdChanged();
            }
        }
        private Nullable<global::System.Int32> _ClassId;
        partial void OnClassIdChanging(Nullable<global::System.Int32> value);
        partial void OnClassIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> OrderId
        {
            get
            {
                return _OrderId;
            }
            set
            {
                OnOrderIdChanging(value);
                ReportPropertyChanging("OrderId");
                _OrderId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("OrderId");
                OnOrderIdChanged();
            }
        }
        private Nullable<global::System.Int32> _OrderId;
        partial void OnOrderIdChanging(Nullable<global::System.Int32> value);
        partial void OnOrderIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String SpeciesName
        {
            get
            {
                return _SpeciesName;
            }
            set
            {
                OnSpeciesNameChanging(value);
                ReportPropertyChanging("SpeciesName");
                _SpeciesName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("SpeciesName");
                OnSpeciesNameChanged();
            }
        }
        private global::System.String _SpeciesName;
        partial void OnSpeciesNameChanging(global::System.String value);
        partial void OnSpeciesNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> FamilyId
        {
            get
            {
                return _FamilyId;
            }
            set
            {
                OnFamilyIdChanging(value);
                ReportPropertyChanging("FamilyId");
                _FamilyId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("FamilyId");
                OnFamilyIdChanged();
            }
        }
        private Nullable<global::System.Int32> _FamilyId;
        partial void OnFamilyIdChanging(Nullable<global::System.Int32> value);
        partial void OnFamilyIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> GenusId
        {
            get
            {
                return _GenusId;
            }
            set
            {
                OnGenusIdChanging(value);
                ReportPropertyChanging("GenusId");
                _GenusId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("GenusId");
                OnGenusIdChanged();
            }
        }
        private Nullable<global::System.Int32> _GenusId;
        partial void OnGenusIdChanging(Nullable<global::System.Int32> value);
        partial void OnGenusIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> KingdomId
        {
            get
            {
                return _KingdomId;
            }
            set
            {
                OnKingdomIdChanging(value);
                ReportPropertyChanging("KingdomId");
                _KingdomId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("KingdomId");
                OnKingdomIdChanged();
            }
        }
        private Nullable<global::System.Int32> _KingdomId;
        partial void OnKingdomIdChanging(Nullable<global::System.Int32> value);
        partial void OnKingdomIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String SpeciesLatin
        {
            get
            {
                return _SpeciesLatin;
            }
            set
            {
                OnSpeciesLatinChanging(value);
                ReportPropertyChanging("SpeciesLatin");
                _SpeciesLatin = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("SpeciesLatin");
                OnSpeciesLatinChanged();
            }
        }
        private global::System.String _SpeciesLatin;
        partial void OnSpeciesLatinChanging(global::System.String value);
        partial void OnSpeciesLatinChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Description
        {
            get
            {
                return _Description;
            }
            set
            {
                OnDescriptionChanging(value);
                ReportPropertyChanging("Description");
                _Description = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Description");
                OnDescriptionChanged();
            }
        }
        private global::System.String _Description;
        partial void OnDescriptionChanging(global::System.String value);
        partial void OnDescriptionChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Habitat
        {
            get
            {
                return _Habitat;
            }
            set
            {
                OnHabitatChanging(value);
                ReportPropertyChanging("Habitat");
                _Habitat = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Habitat");
                OnHabitatChanged();
            }
        }
        private global::System.String _Habitat;
        partial void OnHabitatChanging(global::System.String value);
        partial void OnHabitatChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Distribution
        {
            get
            {
                return _Distribution;
            }
            set
            {
                OnDistributionChanging(value);
                ReportPropertyChanging("Distribution");
                _Distribution = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Distribution");
                OnDistributionChanged();
            }
        }
        private global::System.String _Distribution;
        partial void OnDistributionChanging(global::System.String value);
        partial void OnDistributionChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Food
        {
            get
            {
                return _Food;
            }
            set
            {
                OnFoodChanging(value);
                ReportPropertyChanging("Food");
                _Food = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Food");
                OnFoodChanged();
            }
        }
        private global::System.String _Food;
        partial void OnFoodChanging(global::System.String value);
        partial void OnFoodChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Behaviour
        {
            get
            {
                return _Behaviour;
            }
            set
            {
                OnBehaviourChanging(value);
                ReportPropertyChanging("Behaviour");
                _Behaviour = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Behaviour");
                OnBehaviourChanged();
            }
        }
        private global::System.String _Behaviour;
        partial void OnBehaviourChanging(global::System.String value);
        partial void OnBehaviourChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Breeding
        {
            get
            {
                return _Breeding;
            }
            set
            {
                OnBreedingChanging(value);
                ReportPropertyChanging("Breeding");
                _Breeding = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Breeding");
                OnBreedingChanged();
            }
        }
        private global::System.String _Breeding;
        partial void OnBreedingChanging(global::System.String value);
        partial void OnBreedingChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> Seasons
        {
            get
            {
                return _Seasons;
            }
            set
            {
                OnSeasonsChanging(value);
                ReportPropertyChanging("Seasons");
                _Seasons = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Seasons");
                OnSeasonsChanged();
            }
        }
        private Nullable<global::System.Int32> _Seasons;
        partial void OnSeasonsChanging(Nullable<global::System.Int32> value);
        partial void OnSeasonsChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Status
        {
            get
            {
                return _Status;
            }
            set
            {
                OnStatusChanging(value);
                ReportPropertyChanging("Status");
                _Status = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Status");
                OnStatusChanged();
            }
        }
        private global::System.String _Status;
        partial void OnStatusChanging(global::System.String value);
        partial void OnStatusChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> Flags
        {
            get
            {
                return _Flags;
            }
            set
            {
                OnFlagsChanging(value);
                ReportPropertyChanging("Flags");
                _Flags = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Flags");
                OnFlagsChanged();
            }
        }
        private Nullable<global::System.Int32> _Flags;
        partial void OnFlagsChanging(Nullable<global::System.Int32> value);
        partial void OnFlagsChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> DistributionFlags
        {
            get
            {
                return _DistributionFlags;
            }
            set
            {
                OnDistributionFlagsChanging(value);
                ReportPropertyChanging("DistributionFlags");
                _DistributionFlags = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DistributionFlags");
                OnDistributionFlagsChanged();
            }
        }
        private Nullable<global::System.Int32> _DistributionFlags;
        partial void OnDistributionFlagsChanging(Nullable<global::System.Int32> value);
        partial void OnDistributionFlagsChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> Colour
        {
            get
            {
                return _Colour;
            }
            set
            {
                OnColourChanging(value);
                ReportPropertyChanging("Colour");
                _Colour = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Colour");
                OnColourChanged();
            }
        }
        private Nullable<global::System.Int32> _Colour;
        partial void OnColourChanging(Nullable<global::System.Int32> value);
        partial void OnColourChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> SpeciesStatus
        {
            get
            {
                return _SpeciesStatus;
            }
            set
            {
                OnSpeciesStatusChanging(value);
                ReportPropertyChanging("SpeciesStatus");
                _SpeciesStatus = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("SpeciesStatus");
                OnSpeciesStatusChanged();
            }
        }
        private Nullable<global::System.Int32> _SpeciesStatus;
        partial void OnSpeciesStatusChanging(Nullable<global::System.Int32> value);
        partial void OnSpeciesStatusChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DataStoreModel", "FK_Genus", "Genus")]
        public Genus Genu
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Genus>("DataStoreModel.FK_Genus", "Genus").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Genus>("DataStoreModel.FK_Genus", "Genus").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Genus> GenuReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Genus>("DataStoreModel.FK_Genus", "Genus");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Genus>("DataStoreModel.FK_Genus", "Genus", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DataStoreModel", "FK_Kingdom", "Kingdom")]
        public Kingdom Kingdom
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Kingdom>("DataStoreModel.FK_Kingdom", "Kingdom").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Kingdom>("DataStoreModel.FK_Kingdom", "Kingdom").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Kingdom> KingdomReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Kingdom>("DataStoreModel.FK_Kingdom", "Kingdom");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Kingdom>("DataStoreModel.FK_Kingdom", "Kingdom", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DataStoreModel", "FK_Class", "Class")]
        public Class Class
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Class>("DataStoreModel.FK_Class", "Class").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Class>("DataStoreModel.FK_Class", "Class").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Class> ClassReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Class>("DataStoreModel.FK_Class", "Class");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Class>("DataStoreModel.FK_Class", "Class", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DataStoreModel", "FK_Phylums", "Phylum")]
        public Phylum Phylum
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Phylum>("DataStoreModel.FK_Phylums", "Phylum").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Phylum>("DataStoreModel.FK_Phylums", "Phylum").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Phylum> PhylumReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Phylum>("DataStoreModel.FK_Phylums", "Phylum");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Phylum>("DataStoreModel.FK_Phylums", "Phylum", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DataStoreModel", "FK_Famillyy", "Family")]
        public Family Family
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Family>("DataStoreModel.FK_Famillyy", "Family").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Family>("DataStoreModel.FK_Famillyy", "Family").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Family> FamilyReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Family>("DataStoreModel.FK_Famillyy", "Family");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Family>("DataStoreModel.FK_Famillyy", "Family", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DataStoreModel", "FK_OOrder", "Order")]
        public Order Order
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Order>("DataStoreModel.FK_OOrder", "Order").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Order>("DataStoreModel.FK_OOrder", "Order").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Order> OrderReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Order>("DataStoreModel.FK_OOrder", "Order");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Order>("DataStoreModel.FK_OOrder", "Order", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DataStoreModel", "MapToSpecies", "MapRef")]
        public EntityCollection<MapRef> MapRefs
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<MapRef>("DataStoreModel.MapToSpecies", "MapRef");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<MapRef>("DataStoreModel.MapToSpecies", "MapRef", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DataStoreModel", "Sp1CR", "SimilarSpecy")]
        public EntityCollection<SimilarSpecy> SimilarSpeciesId1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<SimilarSpecy>("DataStoreModel.Sp1CR", "SimilarSpecy");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<SimilarSpecy>("DataStoreModel.Sp1CR", "SimilarSpecy", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DataStoreModel", "Sp2CR", "SimilarSpecy")]
        public EntityCollection<SimilarSpecy> SimilarSpeciesId2
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<SimilarSpecy>("DataStoreModel.Sp2CR", "SimilarSpecy");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<SimilarSpecy>("DataStoreModel.Sp2CR", "SimilarSpecy", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DataStoreModel", "spst", "SpeciesStatu")]
        public SpeciesStatu SpeciesStatu
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<SpeciesStatu>("DataStoreModel.spst", "SpeciesStatu").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<SpeciesStatu>("DataStoreModel.spst", "SpeciesStatu").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<SpeciesStatu> SpeciesStatuReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<SpeciesStatu>("DataStoreModel.spst", "SpeciesStatu");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<SpeciesStatu>("DataStoreModel.spst", "SpeciesStatu", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="DataStoreModel", Name="SpeciesStatu")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class SpeciesStatu : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new SpeciesStatu object.
        /// </summary>
        /// <param name="statusId">Initial value of the StatusId property.</param>
        public static SpeciesStatu CreateSpeciesStatu(global::System.Int32 statusId)
        {
            SpeciesStatu speciesStatu = new SpeciesStatu();
            speciesStatu.StatusId = statusId;
            return speciesStatu;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 StatusId
        {
            get
            {
                return _StatusId;
            }
            set
            {
                if (_StatusId != value)
                {
                    OnStatusIdChanging(value);
                    ReportPropertyChanging("StatusId");
                    _StatusId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("StatusId");
                    OnStatusIdChanged();
                }
            }
        }
        private global::System.Int32 _StatusId;
        partial void OnStatusIdChanging(global::System.Int32 value);
        partial void OnStatusIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String StatusText
        {
            get
            {
                return _StatusText;
            }
            set
            {
                OnStatusTextChanging(value);
                ReportPropertyChanging("StatusText");
                _StatusText = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("StatusText");
                OnStatusTextChanged();
            }
        }
        private global::System.String _StatusText;
        partial void OnStatusTextChanging(global::System.String value);
        partial void OnStatusTextChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DataStoreModel", "spst", "Species")]
        public EntityCollection<Species> Species
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Species>("DataStoreModel.spst", "Species");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Species>("DataStoreModel.spst", "Species", value);
                }
            }
        }

        #endregion
    }

    #endregion
    
}
